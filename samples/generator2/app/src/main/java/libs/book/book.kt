package libs.book



/*
 * ┌ ┐ └ ┘├ ┤ ┬ ┴ ┼ ─ │
 *
 *
 * //Toast.makeText(this, "Сервис onStartCommand", Toast.LENGTH_LONG).show()
 *
 * ┌──────────────────────────────────────────────────┐
 # │ var xxx = MutableLiveData<String> ( "03_HWave2") │
 * ├──────────────────────────────────────────────────┤
 # │ ch1_EN.observeForever { value -> ... }           │
 * ├──────────────────────────────────────────────────┤
 # │ val r1 by Global.ch1_EN.observeAsState()         │
 * ├─────────────────────┬────────────────────────────┤
 # │ live.postValue(0)   │ sevValue в основном потоке │
 * └─────────────────────┴────────────────────────────┘
 * ┌───────────────────┬─────────────────────────────────────────────────────────────────────┐
 * │ kotlin.system     │ https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.system/         │
 * ├───────────────────┴────────────────────────┬────────────────────────────────────────────┤
 * │ measureNanoTime  (block: () -> Unit): Long │ Возвращает прошедшее время в наносекундах  │
 * │ measureTimeMillis(block: () -> Unit): Long │ Возвращает прошедшее время в милисекундах  │
 * ├───────────────────┬────────────────────────┴────────────────────────────────────────────┤
 * │ Измерение времени │ val time = measureTimeMillis{...}                                   │
 * └───────────────────┴─────────────────────────────────────────────────────────────────────┘
 * ┌───────────────────┬────────────────────┐
 * │ Создание потока   │                    │
 * ├───────────────────┴────────────────────┤
 * │ val threadWithRunnable = Thread(xxx()) │
 * │ threadWithRunnable.start(              │
 * │                                        │
 * │ class xxx : Runnable {                 │
 * │   override fun run() {                 │
 * │        while (true) { ... } } }        │
 * └────────────────────────────────────────┘
 *  ┌ ┐ └ ┘├ ┤ ┬ ┴ ┼ ─ │
 * ┌───────────────────┬───────────────────────────────────────────────────────────────────────────────────────────────────┐
 * │ kotlin.math         https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.math/                                         │
 * ├───────────────────────────────────────────────────┬───────────────────────────────────────────────────────────────────┤
 * │  absoluteValue    │ Double.absoluteValue: Double  │                                                                   │
 * │                   │ Float.absoluteValue: Float    │
 * │                   │ Int.absoluteValue: Int        │                                                                   │
 * │                   │ Long.absoluteValue: Long      │                                                                   │
 * ├───────────────────┼───────────────────────────────┼────────────────────────────────────────────────────────────────────
 * │ E                 │ const val E: Double           │ Основание натуральных логарифмов примерно 2,71828.                │
 * │ PI                │ const val PI: Double          │ Отношение длины окружности к ее диаметру примерно 3,14159.        │
 * ├───────────────────┼───────────────────────────────┼────────────────────────────────────────────────────────────────────
 * │ sign              │ sign(x: Double): Double       │ Возвращает знак заданного значения x                              │
 * │                   │ sign(x: Float): Float         │ *   1.0 если значение отрицательное                               │
 * │                   │ Double.sign: Double           │ *   0   если значение равно нулю                                  │
 * │                   │ Float.sign: Float             │ * - 1.0 если значение положительное                               │
 * │                   │ Int.sign: Int                 │ [sign(NaN) является NaN]                                                                   │
 * │                   │ Long.sign: Int                │ NaN.sign является NaN                                                                   │
 * ├───────────────────┼───────────────────────────────┼────────────────────────
 * │ ulp               │ Double.ulp: Double            │                            │
 * │                   │ Float.ulp: Float              │                            │
 * │                   │                               │                            │
 * ├───────────────────┼───────────────────────────────┼────────────────────────
 *
 */

